name: 🚀 CI/CD - Build, Deploy & Test Firefly AI Stack

on:
  push:
    branches: [ main, develop, intgrate_with_chatgpt ]
  workflow_dispatch:
    inputs:
      force_deploy:
        description: 'Force deployment to EC2'
        required: false
        default: false
        type: boolean

concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: true

env:
  DOCKER_REGISTRY: docker.io
  DOCKER_USERNAME: ${{ secrets.DOCKER_USERNAME }}
  DOCKER_PASSWORD: ${{ secrets.DOCKER_PASSWORD }}
  AWS_EC2_HOST: ${{ secrets.AWS_EC2_HOST }}
  AWS_EC2_USER: ${{ secrets.AWS_EC2_USER }}
  AWS_EC2_KEY: ${{ secrets.AWS_EC2_PRIVATE_KEY }}
  FIREFLY_BASE_URL: ${{ secrets.FIREFLY_BASE_URL }}
  OPENAI_API_KEY: ${{ secrets.OPENAI_API_KEY }}

jobs:
  build-and-push:
    runs-on: ubuntu-latest
    outputs:
      ai-image-tag: ${{ steps.meta-ai.outputs.tags }}
      webhook-image-tag: ${{ steps.meta-webhook.outputs.tags }}
      version: ${{ steps.meta.outputs.version }}
    
    steps:
      - name: 📥 Checkout Code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: 🔍 Detect Changes
        uses: dorny/paths-filter@v2
        id: changes
        with:
          filters: |
            ai:
              - 'firefly-ai-categorizer/**'
            webhook:
              - 'webhook_service/**'
            docker:
              - 'docker-compose.yaml'
              - '.env'
              - '*.sh'

      - name: 🐋 Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: 🔐 Login to Docker Hub
        uses: docker/login-action@v3
        with:
          username: ${{ env.DOCKER_USERNAME }}
          password: ${{ env.DOCKER_PASSWORD }}

      - name: 📝 Extract Metadata
        id: meta
        run: |
          VERSION=v$(date +%Y%m%d)-${GITHUB_SHA::8}
          echo "version=$VERSION" >> $GITHUB_OUTPUT
          echo "timestamp=$(date -u +'%Y-%m-%dT%H:%M:%SZ')" >> $GITHUB_OUTPUT

      # AI Categorizer
      - name: 🤖 Build AI Metadata
        id: meta-ai
        uses: docker/metadata-action@v5
        with:
          images: ${{ env.DOCKER_USERNAME }}/firefly-ai-categorizer
          tags: |
            type=ref,event=branch
            type=ref,event=pr
            type=raw,value=latest,enable=${{ github.ref_name == 'main' }}
            type=raw,value=${{ steps.meta.outputs.version }}

      - name: 🔨 Build & Push AI
        if: steps.changes.outputs.ai == 'true' || github.event_name == 'workflow_dispatch'
        uses: docker/build-push-action@v5
        with:
          context: ./firefly-ai-categorizer
          platforms: linux/amd64
          push: true
          tags: ${{ steps.meta-ai.outputs.tags }}
          labels: ${{ steps.meta-ai.outputs.labels }}
          cache-from: type=gha
          cache-to: type=gha,mode=max
          build-args: |
            VERSION=${{ steps.meta.outputs.version }}
            BUILD_DATE=${{ steps.meta.outputs.timestamp }}

      # Webhook Service
      - name: 🪝 Build Webhook Metadata
        id: meta-webhook
        uses: docker/metadata-action@v5
        with:
          images: ${{ env.DOCKER_USERNAME }}/firefly-webhook-service
          tags: |
            type=ref,event=branch
            type=ref,event=pr
            type=raw,value=latest,enable=${{ github.ref_name == 'main' }}
            type=raw,value=${{ steps.meta.outputs.version }}

      - name: 🔨 Build & Push Webhook
        if: steps.changes.outputs.webhook == 'true' || github.event_name == 'workflow_dispatch'
        uses: docker/build-push-action@v5
        with:
          context: ./webhook_service
          platforms: linux/amd64
          push: true
          tags: ${{ steps.meta-webhook.outputs.tags }}
          labels: ${{ steps.meta-webhook.outputs.labels }}
          cache-from: type=gha
          cache-to: type=gha,mode=max
          build-args: |
            VERSION=${{ steps.meta.outputs.version }}
            BUILD_DATE=${{ steps.meta.outputs.timestamp }}

  deploy-to-ec2:
    runs-on: ubuntu-latest
    needs: build-and-push
    if: (github.ref == 'refs/heads/main' || github.ref == 'refs/heads/intgrate_with_chatgpt' || github.event.inputs.force_deploy == 'true') && needs.build-and-push.result == 'success'
    
    steps:
      - name: 🔧 Setup SSH
        run: |
          mkdir -p ~/.ssh
          # Write the private key from the secret, preserving line breaks
          cat > ~/.ssh/id_rsa << 'EOF'
          ${{ secrets.AWS_EC2_PRIVATE_KEY }}
          EOF
          chmod 600 ~/.ssh/id_rsa
          # Add EC2 host to known_hosts to avoid prompt
          ssh-keyscan -H ${{ secrets.AWS_EC2_HOST }} >> ~/.ssh/known_hosts
          # Verify SSH key format
          echo "SSH key setup completed. Key info:"
          ssh-keygen -l -f ~/.ssh/id_rsa || echo "Warning: SSH key format verification failed"

      - name: 📋 Prepare Deployment Files
        run: |
          mkdir -p deployment
          cp docker-compose.yaml deployment/
          cp configure-firefly.sh deployment/
          cp ec2-setup.sh deployment/
          cp ec2-debug.sh deployment/
          # create .env with exact tags
          cat > deployment/.env << EOF
          DOCKER_USERNAME=${{ env.DOCKER_USERNAME }}
          AI_SERVICE_TAG=${{ needs.build-and-push.outputs.version }}
          WEBHOOK_SERVICE_TAG=${{ needs.build-and-push.outputs.version }}
          OPENAI_API_KEY=${{ env.OPENAI_API_KEY }}
          EOF

      - name: 🚀 Deploy to EC2
        run: |
          scp -i ~/.ssh/id_rsa -r deployment/* ${{ env.AWS_EC2_USER }}@${{ env.AWS_EC2_HOST }}:~/firefly/
          ssh -i ~/.ssh/id_rsa ${{ env.AWS_EC2_USER }}@${{ env.AWS_EC2_HOST }} << EOF
            cd ~/firefly
            chmod +x *.sh
            ./ec2-setup.sh
            docker pull $DOCKER_USERNAME/firefly-ai-categorizer:$AI_SERVICE_TAG
            docker pull $DOCKER_USERNAME/firefly-webhook-service:$WEBHOOK_SERVICE_TAG
            docker compose down
            docker compose up -d
          EOF
