services:
  app:
    image: fireflyiii/core:version-6.3.2
    hostname: app
    container_name: firefly_iii_core
    networks:
      - firefly_iii
    restart: always
    volumes:
      - firefly_iii_upload:/var/www/html/storage/upload
    env_file: .env
    ports:
      - '8080:8080'
    depends_on:
      - db

  db:
    image: mariadb:noble
    hostname: db
    container_name: firefly_iii_db
    networks:
      - firefly_iii
    restart: always
    env_file: .db.env
    volumes:
      - firefly_iii_db:/var/lib/mysql

  importer:
    image: fireflyiii/data-importer:version-1.7.10
    hostname: importer
    restart: always
    container_name: firefly_iii_importer
    networks:
      - firefly_iii
    ports:
      - '81:8080'
    depends_on:
      - app
    env_file: .importer.env

  cron:
    image: alpine
    container_name: firefly_iii_cron
    restart: always
    env_file: .env
    command: sh -c "
      apk add tzdata
      && ln -s /usr/share/zoneinfo/${TZ} /etc/localtime
      | echo \"0 3 * * * wget -qO- http://app:8080/api/v1/cron/${STATIC_CRON_TOKEN};echo\" 
      | crontab - 
      && crond -f -L /dev/stdout"
    networks:
      - firefly_iii

  ai-service:
    image: ${DOCKER_USERNAME:-hamadfyad}/firefly-ai-categorizer:${AI_SERVICE_TAG:-latest}
    build:
      context: ./firefly-ai-categorizer
    container_name: firefly_iii_ai_service
    restart: unless-stopped
    environment:
      LOCAL_TOKEN: ${LOCAL_TOKEN}
      FIREFLY_TOKEN_ec2: ${FIREFLY_TOKEN_ec2}
      OPENAI_API_KEY: ${OPENAI_API_KEY}
      FIREFLY_API_URL: http://app:8080
      DATABASE_URL: postgresql://ai_user:ai_password@ai-db:5432/ai_metrics
      # Firefly III Database credentials for real transaction data analysis
      DB_HOST: db
      DB_PORT: 3306
      DB_DATABASE: firefly
      DB_USERNAME: admin
      DB_PASSWORD: admin
    depends_on:
      ai-db:
        condition: service_healthy
    healthcheck:
      test: ["CMD", "python", "-c", "import requests; requests.get('http://localhost:8001/health').raise_for_status()"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 60s
    volumes:
      - ai_service_data:/app/data
      - ai_service_logs:/app/logs
    ports:
      - "8001:8001"  # AI service runs on port 8001
    networks:
      - firefly_iii

  ai-db:
    image: postgres:15-alpine
    container_name: firefly_iii_ai_db
    restart: unless-stopped
    environment:
      POSTGRES_DB: ai_metrics
      POSTGRES_USER: ai_user
      POSTGRES_PASSWORD: ai_password
    volumes:
      - ai_db_data:/var/lib/postgresql/data
    ports:
      - "5433:5432"  # Avoid conflict with main DB
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ai_user -d ai_metrics"]
      interval: 30s
      timeout: 10s
      retries: 3
    networks:
      - firefly_iii

  webhook-service:
    image: ${DOCKER_USERNAME:-hamadfyad}/firefly-webhook-service:${WEBHOOK_SERVICE_TAG:-latest}
    build:
      context: ./webhook_service
    container_name: firefly_iii_webhook_service
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "python", "-c", "import requests; requests.get('http://localhost:8000/health').raise_for_status()"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 60s
    environment:
      FIREFLY_API_URL: http://app:8080
      LOCAL_TOKEN: ${LOCAL_TOKEN}
      FIREFLY_TOKEN_ec2: ${FIREFLY_TOKEN_ec2}
      APP_ENV: ${APP_ENV}
      ENVIRONMENT: ${ENVIRONMENT:-local}
      AI_SERVICE_URL: http://ai-service:8001
    volumes:
      - webhook_service_logs:/app/logs
    ports:
      - "8000:8000"  # Webhook service runs on port 8000
    depends_on:
      ai-service:
        condition: service_healthy
      app:
        condition: service_started
    networks:
      - firefly_iii

volumes:
   firefly_iii_upload:
   firefly_iii_db:
   ai_service_data:
   ai_service_logs:
   webhook_service_logs:
   ai_db_data:

networks:
  firefly_iii:
    driver: bridge
